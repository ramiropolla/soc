Index: libavcodec/Makefile
===================================================================
--- libavcodec/Makefile	(revision 19401)
+++ libavcodec/Makefile	(working copy)
@@ -42,6 +42,7 @@
 OBJS-$(CONFIG_AC3_ENCODER)             += ac3enc.o ac3tab.o ac3.o
 OBJS-$(CONFIG_ALAC_DECODER)            += alac.o
 OBJS-$(CONFIG_ALAC_ENCODER)            += alacenc.o lpc.o
+OBJS-$(CONFIG_AMRNB_DECODER)           += amrnbdec.o celp_filters.o celp_math.o acelp_filters.o acelp_vectors.o lsp.o
 OBJS-$(CONFIG_AMV_DECODER)             += sp5xdec.o mjpegdec.o mjpeg.o
 OBJS-$(CONFIG_APE_DECODER)             += apedec.o
 OBJS-$(CONFIG_ASV1_DECODER)            += asv1.o mpeg12data.o
@@ -180,7 +181,7 @@
 OBJS-$(CONFIG_PPM_DECODER)             += pnmenc.o pnm.o
 OBJS-$(CONFIG_PPM_ENCODER)             += pnmenc.o
 OBJS-$(CONFIG_PTX_DECODER)             += ptx.o
-OBJS-$(CONFIG_QCELP_DECODER)           += qcelpdec.o qcelp_lsp.o celp_math.o celp_filters.o acelp_vectors.o
+OBJS-$(CONFIG_QCELP_DECODER)           += qcelpdec.o celp_math.o celp_filters.o acelp_vectors.o lsp.o
 OBJS-$(CONFIG_QDM2_DECODER)            += qdm2.o mpegaudiodec.o mpegaudiodecheader.o mpegaudio.o mpegaudiodata.o
 OBJS-$(CONFIG_QDRAW_DECODER)           += qdrw.o
 OBJS-$(CONFIG_QPEG_DECODER)            += qpeg.o
Index: libavcodec/allcodecs.c
===================================================================
--- libavcodec/allcodecs.c	(revision 19401)
+++ libavcodec/allcodecs.c	(working copy)
@@ -198,6 +198,7 @@
     REGISTER_ENCDEC  (AAC, aac);
     REGISTER_ENCDEC  (AC3, ac3);
     REGISTER_ENCDEC  (ALAC, alac);
+    REGISTER_DECODER (AMRNB, amrnb);
     REGISTER_DECODER (APE, ape);
     REGISTER_DECODER (ATRAC3, atrac3);
     REGISTER_DECODER (COOK, cook);
Index: doc/general.texi
===================================================================
--- doc/general.texi	(revision 19401)
+++ doc/general.texi	(working copy)
@@ -523,8 +523,8 @@
 @item ADPCM Westwood Studios IMA @tab     @tab  X
     @tab Used in Westwood Studios games like Command and Conquer.
 @item ADPCM Yamaha           @tab  X  @tab  X
-@item AMR-NB                 @tab  E  @tab  E
-    @tab supported through external library libopencore-amrnb
+@item AMR-NB                 @tab  X  @tab  E
+    @tab encoding supported through external library libopencore-amrnb
 @item AMR-WB                 @tab     @tab  E
     @tab decoding supported through external library libopencore-amrwb
 @item Apple lossless audio   @tab  X  @tab  X
Index: Changelog
===================================================================
--- Changelog	(revision 19401)
+++ Changelog	(working copy)
@@ -28,6 +28,7 @@
 - DivX (XSUB) subtitle encoder
 - nonfree libamr support for AMR-NB/WB decoding/encoding removed
 - Experimental AAC encoder
+- AMR-NB decoder
 
 
 
Index: libavcodec/celp_filters.c
===================================================================
--- libavcodec/celp_filters.c	(revision 19401)
+++ libavcodec/celp_filters.c	(working copy)
@@ -50,6 +50,31 @@
     }
 }
 
+void ff_celp_convolve_circf(
+        float* fc_out,
+        const float* fc_in,
+        const float* filter,
+        int len)
+{
+    int i, k;
+
+    memset(fc_out, 0, len * sizeof(float));
+
+    /* Since there are few pulses over an entire subframe (i.e. almost
+       all fc_in[i] are zero) it is faster to loop over fc_in first. */
+    for(i=0; i<len; i++)
+    {
+        if(fc_in[i])
+        {
+            for(k=0; k<i; k++)
+                fc_out[k] += fc_in[i] * filter[len + k - i];
+
+            for(k=i; k<len; k++)
+                fc_out[k] += fc_in[i] * filter[      k - i];
+        }
+    }
+}
+
 int ff_celp_lp_synthesis_filter(
         int16_t *out,
         const int16_t* filter_coeffs,
@@ -120,6 +145,6 @@
     {
         out[n] = in[n];
         for(i=1; i<filter_length; i++)
-            out[n] -= filter_coeffs[i-1] * in[n-i];
+            out[n] += filter_coeffs[i-1] * in[n-i];
     }
 }
Index: libavcodec/celp_filters.h
===================================================================
--- libavcodec/celp_filters.h	(revision 19401)
+++ libavcodec/celp_filters.h	(working copy)
@@ -43,6 +43,23 @@
         int len);
 
 /**
+ * Circularly convolve fixed vector with a phase dispersion impulse
+ *        response filter (D.6.2 of G.729 and 6.1.5 of AMR).
+ * @param fc_out vector with filter applied
+ * @param fc_in source vector
+ * @param filter phase filter coefficients
+ *
+ *  fc_out[n] = sum(i,0,len-1){ fc_in[i] * filter[(len + n - i)%len] }
+ *
+ * \note fc_in and fc_out should not overlap!
+ */
+void ff_celp_convolve_circf(
+        float* fc_out,
+        const float* fc_in,
+        const float* filter,
+        int len);
+
+/**
  * LP synthesis filter.
  * @param out [out] pointer to output buffer
  * @param filter_coeffs filter coefficients (-0x8000 <= (3.12) < 0x8000)
Index: libavcodec/acelp_filters.c
===================================================================
--- libavcodec/acelp_filters.c	(revision 19401)
+++ libavcodec/acelp_filters.c	(working copy)
@@ -93,3 +93,17 @@
         hpf_f[0] = tmp;
     }
 }
+
+void ff_acelp_high_pass_filterf(float *buf, float *mem, int length)
+{
+    int i;
+    float tmp;
+
+    for (i = 0; i < length; i++) {
+         tmp = buf[i] + 1.933105469 * mem[0] - 0.935913085 * mem[1];
+         buf[i] = 0.939819335 * (tmp - 2 * mem[0] + mem[1]);
+
+         mem[1] = mem[0];
+         mem[0] = tmp;
+    }
+}
Index: libavcodec/acelp_filters.h
===================================================================
--- libavcodec/acelp_filters.h	(revision 19401)
+++ libavcodec/acelp_filters.h	(working copy)
@@ -81,4 +81,12 @@
 void ff_acelp_high_pass_filter(int16_t* out, int hpf_f[2],
                                const int16_t* in, int length);
 
+/**
+ * high-pass filtering (6.2.2 of 3GPP TS 26.090)
+ * @param samples [in/out]Â·
+ * @param mem intermediate values used by filter (should be 0 initially)
+ * @param length input data size
+ */
+void ff_acelp_high_pass_filterf(float *samples, float mem[2], int length);
+
 #endif /* AVCODEC_ACELP_FILTERS_H */
Index: libavcodec/acelp_vectors.c
===================================================================
--- libavcodec/acelp_vectors.c	(revision 19401)
+++ libavcodec/acelp_vectors.c	(working copy)
@@ -22,6 +22,7 @@
 
 #include <inttypes.h>
 #include "avcodec.h"
+#include "celp_math.h"
 #include "acelp_vectors.h"
 
 const uint8_t ff_fc_2pulses_9bits_track1[16] =
@@ -155,3 +156,14 @@
         out[i] = weight_coeff_a * in_a[i]
                + weight_coeff_b * in_b[i];
 }
+
+void ff_apply_gain_ctrl(float *v_out, const float *v_ref, const float *v_in,
+                        const int length)
+{
+    int i;
+    float scalefactor = ff_dot_productf(v_in, v_in, length);
+    if (scalefactor)
+        scalefactor = sqrt(ff_dot_productf(v_ref, v_ref, length) / scalefactor);
+    for (i = 0; i < length; i++)
+        v_out[i] = scalefactor * v_in[i];
+}
Index: libavcodec/acelp_vectors.h
===================================================================
--- libavcodec/acelp_vectors.h	(revision 19401)
+++ libavcodec/acelp_vectors.h	(working copy)
@@ -164,4 +164,22 @@
 void ff_weighted_vector_sumf(float *out, const float *in_a, const float *in_b,
                              float weight_coeff_a, float weight_coeff_b, int length);
 
+/**
+ * Apply adaptive gain control by gain scaling.
+ *
+ * @param v_out output vector
+ * @param v_in gain-controlled vector
+ * @param v_ref vector to control gain of
+ * @param length vectors length
+ *
+ * @note If v_in is zero (or its energy underflows), the output is zero.
+ *       This is the behavior of the AMR reference decoder. The QCELP
+ *       reference decoder seems to have undefined behavior.
+ *
+ * TIA/EIA/IS-733 2.4.8.3-2/3/4/5, 2.4.8.6
+ * 3GPP TS 26.090 6.1 (6)
+ */
+void ff_apply_gain_ctrl(float *v_out, const float *v_ref, const float *v_in,
+                        const int length);
+
 #endif /* AVCODEC_ACELP_VECTORS_H */
Index: libavcodec/qcelpdec.c
===================================================================
--- libavcodec/qcelpdec.c	(revision 19401)
+++ libavcodec/qcelpdec.c	(working copy)
@@ -38,6 +38,7 @@
 #include "celp_math.h"
 #include "celp_filters.h"
 #include "acelp_vectors.h"
+#include "lsp.h"
 
 #undef NDEBUG
 #include <assert.h>
@@ -76,13 +77,6 @@
 } QCELPContext;
 
 /**
- * Reconstructs LPC coefficients from the line spectral pair frequencies.
- *
- * TIA/EIA/IS-733 2.4.3.3.5
- */
-void ff_celp_lspf2lpc(const double *lspf, float *lpc);
-
-/**
  * Initialize the speech codec according to the specification.
  *
  * TIA/EIA/IS-733 2.4.9
Index: libavcodec/qcelp_lsp.c
===================================================================
--- libavcodec/qcelp_lsp.c	(revision 19401)
+++ libavcodec/qcelp_lsp.c	(working copy)
@@ -1,81 +0,0 @@
-/*
- * QCELP decoder
- * Copyright (c) 2007 Reynaldo H. Verdejo Pinochet
- *
- * This file is part of FFmpeg.
- *
- * FFmpeg is free software; you can redistribute it and/or
- * modify it under the terms of the GNU Lesser General Public
- * License as published by the Free Software Foundation; either
- * version 2.1 of the License, or (at your option) any later version.
- *
- * FFmpeg is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * Lesser General Public License for more details.
- *
- * You should have received a copy of the GNU Lesser General Public
- * License along with FFmpeg; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
- */
-
-/**
- * @file libavcodec/qcelp_lsp.c
- * QCELP decoder
- * @author Reynaldo H. Verdejo Pinochet
- * @remark FFmpeg merging spearheaded by Kenan Gillet
- * @remark Development mentored by Benjamin Larson
- */
-
-#include "libavutil/mathematics.h"
-
-/**
- * Computes the Pa / (1 + z(-1)) or Qa / (1 - z(-1)) coefficients
- * needed for LSP to LPC conversion.
- * We only need to calculate the 6 first elements of the polynomial.
- *
- * @param lspf line spectral pair frequencies
- * @param f [out] polynomial input/output as a vector
- *
- * TIA/EIA/IS-733 2.4.3.3.5-1/2
- */
-static void lsp2polyf(const double *lspf, double *f, int lp_half_order)
-{
-    int i, j;
-
-    f[0] = 1.0;
-    f[1] = -2 * lspf[0];
-    lspf -= 2;
-    for(i=2; i<=lp_half_order; i++)
-    {
-        double val = -2 * lspf[2*i];
-        f[i] = val * f[i-1] + 2*f[i-2];
-        for(j=i-1; j>1; j--)
-            f[j] += f[j-1] * val + f[j-2];
-        f[1] += val;
-    }
-}
-
-/**
- * Reconstructs LPC coefficients from the line spectral pair frequencies.
- *
- * @param lspf line spectral pair frequencies
- * @param lpc linear predictive coding coefficients
- */
-void ff_celp_lspf2lpc(const double *lspf, float *lpc)
-{
-    double pa[6], qa[6];
-    int   i;
-
-    lsp2polyf(lspf,     pa, 5);
-    lsp2polyf(lspf + 1, qa, 5);
-
-    for (i=4; i>=0; i--)
-    {
-        double paf = pa[i+1] + pa[i];
-        double qaf = qa[i+1] - qa[i];
-
-        lpc[i  ] = 0.5*(paf+qaf);
-        lpc[9-i] = 0.5*(paf-qaf);
-    }
-}
Index: libavcodec/lsp.c
===================================================================
--- libavcodec/lsp.c	(revision 19401)
+++ libavcodec/lsp.c	(working copy)
@@ -1,6 +1,7 @@
 /*
  * LSP routines for ACELP-based codecs
  *
+ * Copyright (c) 2007 Reynaldo H. Verdejo Pinochet (QCELP decoder)
  * Copyright (c) 2008 Vladimir Voroshilov
  *
  * This file is part of FFmpeg.
@@ -118,3 +119,48 @@
     /* LSP values for second subframe (3.2.5 of G.729)*/
     ff_acelp_lsp2lpc(lp_2nd, lsp_2nd, lp_order >> 1);
 }
+
+/**
+ * Computes the Pa / (1 + z(-1)) or Qa / (1 - z(-1)) coefficients
+ * needed for LSP to LPC conversion.
+ * We only need to calculate the 6 first elements of the polynomial.
+ *
+ * @param lspf line spectral pair frequencies
+ * @param f [out] polynomial input/output as a vector
+ *
+ * TIA/EIA/IS-733 2.4.3.3.5-1/2
+ */
+static void lsp2polyf(const double *lspf, double *f, int lp_half_order)
+{
+    int i, j;
+
+    f[0] = 1.0;
+    f[1] = -2 * lspf[0];
+    lspf -= 2;
+    for(i=2; i<=lp_half_order; i++)
+    {
+        double val = -2 * lspf[2*i];
+        f[i] = val * f[i-1] + 2*f[i-2];
+        for(j=i-1; j>1; j--)
+            f[j] += f[j-1] * val + f[j-2];
+        f[1] += val;
+    }
+}
+
+void ff_celp_lspf2lpc(const double *lspf, float *lpc)
+{
+    double pa[6], qa[6];
+    int   i;
+
+    lsp2polyf(lspf,     pa, 5);
+    lsp2polyf(lspf + 1, qa, 5);
+
+    for (i=4; i>=0; i--)
+    {
+        double paf = pa[i+1] + pa[i];
+        double qaf = qa[i+1] - qa[i];
+
+        lpc[i  ] = 0.5*(paf+qaf);
+        lpc[9-i] = 0.5*(paf-qaf);
+    }
+}
Index: libavcodec/lsp.h
===================================================================
--- libavcodec/lsp.h	(revision 19401)
+++ libavcodec/lsp.h	(working copy)
@@ -67,4 +67,14 @@
  */
 void ff_acelp_lp_decode(int16_t* lp_1st, int16_t* lp_2nd, const int16_t* lsp_2nd, const int16_t* lsp_prev, int lp_order);
 
+/**
+ * Reconstructs LPC coefficients from the line spectral pair frequencies.
+ *
+ * TIA/EIA/IS-733 2.4.3.3.5
+ *
+ * @param lspf line spectral pair frequencies
+ * @param lpc linear predictive coding coefficients
+ */
+void ff_celp_lspf2lpc(const double *lspf, float *lpc);
+
 #endif /* AVCODEC_LSP_H */
