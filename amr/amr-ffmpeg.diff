Index: libavcodec/Makefile
===================================================================
--- libavcodec/Makefile	(revision 19401)
+++ libavcodec/Makefile	(working copy)
@@ -42,6 +42,7 @@
 OBJS-$(CONFIG_AC3_ENCODER)             += ac3enc.o ac3tab.o ac3.o
 OBJS-$(CONFIG_ALAC_DECODER)            += alac.o
 OBJS-$(CONFIG_ALAC_ENCODER)            += alacenc.o lpc.o
+OBJS-$(CONFIG_AMRNB_DECODER)           += amrnbdec.o qcelp_lsp.o celp_filters.o celp_math.o acelp_filters.o acelp_vectors.o
 OBJS-$(CONFIG_AMV_DECODER)             += sp5xdec.o mjpegdec.o mjpeg.o
 OBJS-$(CONFIG_APE_DECODER)             += apedec.o
 OBJS-$(CONFIG_ASV1_DECODER)            += asv1.o mpeg12data.o
Index: libavcodec/allcodecs.c
===================================================================
--- libavcodec/allcodecs.c	(revision 19401)
+++ libavcodec/allcodecs.c	(working copy)
@@ -198,6 +198,7 @@
     REGISTER_ENCDEC  (AAC, aac);
     REGISTER_ENCDEC  (AC3, ac3);
     REGISTER_ENCDEC  (ALAC, alac);
+    REGISTER_DECODER (AMRNB, amrnb);
     REGISTER_DECODER (APE, ape);
     REGISTER_DECODER (ATRAC3, atrac3);
     REGISTER_DECODER (COOK, cook);
Index: doc/general.texi
===================================================================
--- doc/general.texi	(revision 19401)
+++ doc/general.texi	(working copy)
@@ -523,8 +523,8 @@
 @item ADPCM Westwood Studios IMA @tab     @tab  X
     @tab Used in Westwood Studios games like Command and Conquer.
 @item ADPCM Yamaha           @tab  X  @tab  X
-@item AMR-NB                 @tab  E  @tab  E
-    @tab supported through external library libopencore-amrnb
+@item AMR-NB                 @tab  X  @tab  E
+    @tab encoding supported through external library libopencore-amrnb
 @item AMR-WB                 @tab     @tab  E
     @tab decoding supported through external library libopencore-amrwb
 @item Apple lossless audio   @tab  X  @tab  X
Index: Changelog
===================================================================
--- Changelog	(revision 19401)
+++ Changelog	(working copy)
@@ -28,6 +28,7 @@
 - DivX (XSUB) subtitle encoder
 - nonfree libamr support for AMR-NB/WB decoding/encoding removed
 - Experimental AAC encoder
+- AMR-NB decoder
 
 
 
Index: libavcodec/celp_filters.c
===================================================================
--- libavcodec/celp_filters.c	(revision 19401)
+++ libavcodec/celp_filters.c	(working copy)
@@ -84,6 +84,31 @@
     return 0;
 }
 
+void ff_celp_convolve_circf(
+        float* fc_out,
+        const float* fc_in,
+        const float* filter,
+        int len)
+{
+    int i, k;
+
+    memset(fc_out, 0, len * sizeof(float));
+
+    /* Since there are few pulses over an entire subframe (i.e. almost
+       all fc_in[i] are zero) it is faster to loop over fc_in first. */
+    for(i=0; i<len; i++)
+    {
+        if(fc_in[i])
+        {
+            for(k=0; k<i; k++)
+                fc_out[k] += fc_in[i] * filter[len + k - i];
+
+            for(k=i; k<len; k++)
+                fc_out[k] += fc_in[i] * filter[      k - i];
+        }
+    }
+}
+
 void ff_celp_lp_synthesis_filterf(
         float *out,
         const float* filter_coeffs,
@@ -120,6 +145,6 @@
     {
         out[n] = in[n];
         for(i=1; i<filter_length; i++)
-            out[n] -= filter_coeffs[i-1] * in[n-i];
+            out[n] += filter_coeffs[i-1] * in[n-i];
     }
 }
Index: libavcodec/acelp_filters.c
===================================================================
--- libavcodec/acelp_filters.c	(revision 19401)
+++ libavcodec/acelp_filters.c	(working copy)
@@ -93,3 +93,17 @@
         hpf_f[0] = tmp;
     }
 }
+
+void ff_acelp_high_pass_filterf(float *buf, float *mem, int length)
+{
+    int i;
+    float tmp;
+
+    for (i = 0; i < length; i++) {
+         tmp = buf[i] + 1.933105469 * mem[0] - 0.935913085 * mem[1];
+         buf[i] = 0.939819335 * (tmp - 2 * mem[0] + mem[1]);
+
+         mem[1] = mem[0];
+         mem[0] = tmp;
+    }
+}
Index: libavcodec/acelp_filters.h
===================================================================
--- libavcodec/acelp_filters.h	(revision 19401)
+++ libavcodec/acelp_filters.h	(working copy)
@@ -81,4 +81,12 @@
 void ff_acelp_high_pass_filter(int16_t* out, int hpf_f[2],
                                const int16_t* in, int length);
 
+/**
+ * high-pass filtering (6.2.2 of 3GPP TS 26.090)
+ * @param samples [in/out]Â·
+ * @param mem intermediate values used by filter (should be 0 initially)
+ * @param length input data size
+ */
+void ff_acelp_high_pass_filterf(float *samples, float mem[2], int length);
+
 #endif /* AVCODEC_ACELP_FILTERS_H */
Index: libavcodec/acelp_vectors.c
===================================================================
--- libavcodec/acelp_vectors.c	(revision 19401)
+++ libavcodec/acelp_vectors.c	(working copy)
@@ -22,6 +22,7 @@
 
 #include <inttypes.h>
 #include "avcodec.h"
+#include "celp_math.h"
 #include "acelp_vectors.h"
 
 const uint8_t ff_fc_2pulses_9bits_track1[16] =
@@ -155,3 +156,14 @@
         out[i] = weight_coeff_a * in_a[i]
                + weight_coeff_b * in_b[i];
 }
+
+void ff_apply_gain_ctrl(float *v_out, const float *v_ref, const float *v_in,
+                        const int length)
+{
+    int i;
+    float scalefactor = ff_dot_productf(v_in, v_in, length);
+    if (scalefactor)
+        scalefactor = sqrt(ff_dot_productf(v_ref, v_ref, length) / scalefactor);
+    for (i = 0; i < length; i++)
+        v_out[i] = scalefactor * v_in[i];
+}
Index: libavcodec/acelp_vectors.h
===================================================================
--- libavcodec/acelp_vectors.h	(revision 19401)
+++ libavcodec/acelp_vectors.h	(working copy)
@@ -164,4 +164,22 @@
 void ff_weighted_vector_sumf(float *out, const float *in_a, const float *in_b,
                              float weight_coeff_a, float weight_coeff_b, int length);
 
+/**
+ * Apply adaptive gain control by gain scaling.
+ *
+ * @param v_out output vector
+ * @param v_in gain-controlled vector
+ * @param v_ref vector to control gain of
+ * @param length vectors length
+ *
+ * @note If v_in is zero (or its energy underflows), the output is zero.
+ *       This is the behavior of the AMR reference decoder. The QCELP
+ *       reference decoder seems to have undefined behavior.
+ *
+ * TIA/EIA/IS-733 2.4.8.3-2/3/4/5, 2.4.8.6
+ * 3GPP TS 26.090 6.1 (6)
+ */
+void ff_apply_gain_ctrl(float *v_out, const float *v_ref, const float *v_in,
+                        const int length);
+
 #endif /* AVCODEC_ACELP_VECTORS_H */
