Index: libavcodec/Makefile
===================================================================
--- libavcodec/Makefile	(revision 17136)
+++ libavcodec/Makefile	(working copy)
@@ -39,6 +39,7 @@
 OBJS-$(CONFIG_AC3_ENCODER)             += ac3enc.o ac3tab.o ac3.o
 OBJS-$(CONFIG_ALAC_DECODER)            += alac.o
 OBJS-$(CONFIG_ALAC_ENCODER)            += alacenc.o lpc.o
+OBJS-$(CONFIG_AMRNB_DECODER)           += amrnbfloatdec.o qcelp_lsp.o celp_math.o
 OBJS-$(CONFIG_AMV_DECODER)             += sp5xdec.o mjpegdec.o mjpeg.o
 OBJS-$(CONFIG_APE_DECODER)             += apedec.o
 OBJS-$(CONFIG_ASV1_DECODER)            += asv1.o mpeg12data.o
Index: libavcodec/allcodecs.c
===================================================================
--- libavcodec/allcodecs.c	(revision 17136)
+++ libavcodec/allcodecs.c	(working copy)
@@ -182,6 +182,7 @@
     REGISTER_DECODER (AAC, aac);
     REGISTER_ENCDEC  (AC3, ac3);
     REGISTER_ENCDEC  (ALAC, alac);
+    REGISTER_DECODER (AMRNB, amrnb);
     REGISTER_DECODER (APE, ape);
     REGISTER_DECODER (ATRAC3, atrac3);
     REGISTER_DECODER (COOK, cook);
Index: doc/general.texi
===================================================================
--- doc/general.texi	(revision 17136)
+++ doc/general.texi	(working copy)
@@ -356,8 +356,8 @@
 @item AAC                    @tab  E  @tab  X
     @tab encoding supported through external library libfaac
 @item AC-3                   @tab IX  @tab IX
-@item AMR-NB                 @tab  E  @tab  E
-    @tab supported through external library libamrnb
+@item AMR-NB                 @tab  X  @tab  E
+    @tab encoding supported through external library libamrnb
 @item AMR-WB                 @tab  E  @tab  E
     @tab supported through external library libamrwb
 @item AMV IMA ADPCM          @tab     @tab  X
Index: Changelog
===================================================================
--- Changelog	(revision 17136)
+++ Changelog	(working copy)
@@ -149,6 +149,7 @@
 - Electronic Arts TQI decoder
 - OpenJPEG based JPEG 2000 decoder
 - NC (NC4600) cameras file demuxer
+- AMR-NB decoder
 
 version 0.4.9-pre1:
 
Index: libavcodec/celp_filters.c
===================================================================
--- libavcodec/celp_filters.c	(revision 17468)
+++ libavcodec/celp_filters.c	(working copy)
@@ -85,6 +85,31 @@
     return 0;
 }
 
+void ff_celp_convolve_circf(
+        float* fc_out,
+        const float* fc_in,
+        const float* filter,
+        int len)
+{
+    int i, k;
+
+    memset(fc_out, 0, len * sizeof(float));
+
+    /* Since there are few pulses over an entire subframe (i.e. almost
+       all fc_in[i] are zero) it is faster to loop over fc_in first. */
+    for(i=0; i<len; i++)
+    {
+        if(fc_in[i])
+        {
+            for(k=0; k<i; k++)
+                fc_out[k] += fc_in[i] * filter[len + k - i];
+
+            for(k=i; k<len; k++)
+                fc_out[k] += fc_in[i] * filter[      k - i];
+        }
+    }
+}
+
 void ff_celp_lp_synthesis_filterf(
         float *out,
         const float* filter_coeffs,
Index: libavcodec/celp_filters.h
===================================================================
--- libavcodec/celp_filters.h	(revision 17468)
+++ libavcodec/celp_filters.h	(working copy)
@@ -70,6 +70,23 @@
         int rounder);
 
 /**
+ * Circularly convolve fixed vector with a phase dispersion impulse
+ *        response filter (D.6.2 of G.729 and 6.1.5 of AMR).
+ * @param fc_out vector with filter applied
+ * @param fc_in source vector
+ * @param filter phase filter coefficients
+ *
+ *  fc_out[n] = sum(i,0,len-1){ fc_in[i] * filter[(len + n - i)%len] }
+ *
+ * \note fc_in and fc_out should not overlap!
+ */
+void ff_celp_convolve_circf(
+        float* fc_out,
+        const float* fc_in,
+        const float* filter,
+        int len);
+
+/**
  * LP synthesis filter.
  * @param out [out] pointer to output buffer
  *        - the array out[-filter_length, -1] must
