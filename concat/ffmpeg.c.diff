diff --git a/ffmpeg.c b/ffmpeg.c
index 22bfed8..945c9c7 100644
--- a/ffmpeg.c
+++ b/ffmpeg.c
@@ -70,6 +70,8 @@
 
 #undef exit
 
+#include "libavformat/playlist.h"
+
 const char program_name[] = "FFmpeg";
 const int program_birth_year = 2000;
 
@@ -223,6 +225,8 @@ static unsigned int sws_flags = SWS_BICUBIC;
 
 static int64_t timer_start;
 
+PlaylistContext *playlist_ctx;
+
 static uint8_t *audio_buf;
 static uint8_t *audio_out;
 static uint8_t *audio_out2;
@@ -1237,7 +1241,8 @@ static void print_report(AVFormatContext **output_files,
 /* pkt = NULL means EOF (needed to flush decoder buffers) */
 static int output_packet(AVInputStream *ist, int ist_index,
                          AVOutputStream **ost_table, int nb_ostreams,
-                         const AVPacket *pkt)
+                         const AVPacket *pkt,
+                         AVFormatContext *is)
 {
     AVFormatContext *os;
     AVOutputStream *ost;
@@ -1250,7 +1255,24 @@ static int output_packet(AVInputStream *ist, int ist_index,
     AVSubtitle subtitle, *subtitle_to_free;
     int got_subtitle;
     AVPacket avpkt;
-
+    if (ist && is && pkt && is->iformat && is->iformat->long_name &&
+        !strncmp(is->iformat->long_name, "CONCAT", 6) && is->nb_streams > pkt->stream_index &&
+        is->streams && is->streams[pkt->stream_index] && is->streams[pkt->stream_index]->codec) {
+        ist->st = is->streams[pkt->stream_index];
+        if (!ist->st->codec->codec) {
+            AVCodec *codec = avcodec_find_decoder(ist->st->codec->codec_id);
+            if (!codec) {
+                av_log(ist->st->codec, AV_LOG_ERROR, "Decoder (codec id %d) not found for input stream #%d.%d\n",
+                       ist->st->codec->codec_id, ist->file_index, ist->index);
+                return AVERROR(EINVAL);
+             }
+             if (avcodec_open(ist->st->codec, codec) < 0) {
+                av_log(ist->st->codec, AV_LOG_ERROR, "Error while opening decoder for input stream #%d.%d\n",
+                       ist->file_index, ist->index);
+                return AVERROR(EINVAL);
+             }
+         }
+    }
     if(ist->next_pts == AV_NOPTS_VALUE)
         ist->next_pts= ist->pts;
 
@@ -1644,6 +1666,7 @@ static int av_encode(AVFormatContext **output_files,
     uint8_t no_packet[MAX_FILES]={0};
     int no_packet_count=0;
 
+
     file_table= av_mallocz(nb_input_files * sizeof(AVInputFile));
     if (!file_table)
         goto fail;
@@ -2278,8 +2301,7 @@ static int av_encode(AVFormatContext **output_files,
         }
 
         //fprintf(stderr,"read #%d.%d size=%d\n", ist->file_index, ist->index, pkt.size);
-        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt) < 0) {
-
+        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt, is) < 0) {
             if (verbose >= 0)
                 fprintf(stderr, "Error while decoding stream #%d.%d\n",
                         ist->file_index, ist->index);
@@ -2300,7 +2322,7 @@ static int av_encode(AVFormatContext **output_files,
     for(i=0;i<nb_istreams;i++) {
         ist = ist_table[i];
         if (ist->decoding_needed) {
-            output_packet(ist, i, ost_table, nb_ostreams, NULL);
+            output_packet(ist, i, ost_table, nb_ostreams, NULL, is);
         }
     }
 
@@ -2848,10 +2870,12 @@ static enum CodecID find_codec_or_die(const char *name, int type, int encoder)
 
 static void opt_input_file(const char *filename)
 {
+
     AVFormatContext *ic;
     AVFormatParameters params, *ap = &params;
     int err, i, ret, rfps, rfps_base;
     int64_t timestamp;
+    char concatenate_video_files;
 
     if (!strcmp(filename, "-"))
         filename = "pipe:";
@@ -2859,6 +2883,24 @@ static void opt_input_file(const char *filename)
     using_stdin |= !strncmp(filename, "pipe:", 5) ||
                     !strcmp(filename, "/dev/stdin");
 
+    playlist_ctx = ff_playlist_from_encodedstring(filename, ',');
+    if (playlist_ctx) {
+        av_log(ic, AV_LOG_DEBUG, "Generating playlist from %s\n", filename);
+        concatenate_video_files = 1;
+        ic = avformat_alloc_context();
+        av_strlcpy(ic->filename, filename, sizeof(ic->filename));
+        ic->nb_streams = 2;
+        ic->iformat = ff_concat_alloc_demuxer();
+        ff_playlist_set_context(ic, playlist_ctx);
+        ff_playlist_populate_context(playlist_ctx, playlist_ctx->pe_curidx);
+        ff_playlist_set_streams(ic);
+        nb_input_files = 1;
+        input_files[0] = ic;
+        goto configcodecs;
+    }
+    else
+        concatenate_video_files = 0;
+
     /* get default parameters from command line */
     ic = avformat_alloc_context();
 
@@ -2925,6 +2967,8 @@ static void opt_input_file(const char *filename)
         start_time = 0;
     }
 
+    configcodecs:
+
     /* update the current parameters so that they match the one of the input stream */
     for(i=0;i<ic->nb_streams;i++) {
         AVCodecContext *enc = ic->streams[i]->codec;
@@ -3000,6 +3044,8 @@ static void opt_input_file(const char *filename)
         dump_format(ic, nb_input_files, filename, 0);
 
     nb_input_files++;
+    if (concatenate_video_files)
+        nb_input_files = 1;
     file_iformat = NULL;
     file_oformat = NULL;
 
