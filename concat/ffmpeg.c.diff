diff --git a/ffmpeg.c b/ffmpeg.c
index e899180..51f100e 100644
--- a/ffmpeg.c
+++ b/ffmpeg.c
@@ -1237,7 +1237,8 @@ static void print_report(AVFormatContext **output_files,
 /* pkt = NULL means EOF (needed to flush decoder buffers) */
 static int output_packet(AVInputStream *ist, int ist_index,
                          AVOutputStream **ost_table, int nb_ostreams,
-                         const AVPacket *pkt)
+                         AVPacket *pkt,
+                         AVFormatContext *is)
 {
     AVFormatContext *os;
     AVOutputStream *ost;
@@ -1249,8 +1250,14 @@ static int output_packet(AVInputStream *ist, int ist_index,
     static unsigned int samples_size= 0;
     AVSubtitle subtitle, *subtitle_to_free;
     int got_subtitle;
+    int offset = 0;
     AVPacket avpkt;
 
+    if (pkt) {
+        ist->st = is->streams[pkt->stream_index];
+        offset = pkt->index_offset;
+    }
+     
     if(ist->next_pts == AV_NOPTS_VALUE)
         ist->next_pts= ist->pts;
 
@@ -1292,6 +1299,15 @@ static int output_packet(AVInputStream *ist, int ist_index,
                        endianness as CPU */
                 ret = avcodec_decode_audio3(ist->st->codec, samples, &data_size,
                                             &avpkt);
+
+
+                ist->st = is->streams[avpkt.stream_index];
+
+                    while (ret < 0)
+                        ret = ist->st->codec->codec->decode(ist->st->codec, samples, &data_size,
+                                            &avpkt);
+
+
                 if (ret < 0)
                     goto fail_decode;
                 avpkt.data += ret;
@@ -1314,6 +1330,12 @@ static int output_packet(AVInputStream *ist, int ist_index,
                     ret = avcodec_decode_video2(ist->st->codec,
                                                 &picture, &got_picture, &avpkt);
                     ist->st->quality= picture.quality;
+
+                    ist->st = is->streams[avpkt.stream_index];
+
+                    while (ret < 0)
+                        ret = ist->st->codec->codec->decode(ist->st->codec,
+                                                &picture, &got_picture, &avpkt);
                     if (ret < 0)
                         goto fail_decode;
                     if (!got_picture) {
@@ -1398,7 +1420,7 @@ static int output_packet(AVInputStream *ist, int ist_index,
                 int frame_size;
 
                 ost = ost_table[i];
-                if (ost->source_index == ist_index) {
+                if (ost->source_index == ist_index - offset) {
                     os = output_files[ost->file_index];
 
 #if 0
@@ -2241,12 +2263,39 @@ static int av_encode(AVFormatContext **output_files,
         if (do_pkt_dump) {
             av_pkt_dump_log(NULL, AV_LOG_DEBUG, &pkt, do_hex_dump);
         }
+
+        if (pkt.stream_index >= nb_istreams &&
+            pkt.stream_index < is->nb_streams &&
+            pkt.stream_index > 0 &&
+            is->streams[pkt.stream_index]) {
+            ist_table = av_realloc(ist_table, sizeof(*ist_table) * (pkt.stream_index + 1));
+            for (i = nb_istreams; i < pkt.stream_index + 1; ++i)
+                ist_table[i] = NULL;
+            file_table[file_index].nb_streams = file_table[file_index].ist_index + pkt.stream_index + 1;
+            nb_istreams = file_table[file_index].ist_index + pkt.stream_index + 1;
+        }
+
+        if (!ist_table[pkt.stream_index]) {
+            ist = ist_table[pkt.stream_index] = av_mallocz(sizeof(AVInputStream));
+            ist->st              = is->streams[pkt.stream_index];
+            ist->file_index      = file_index;
+            ist->decoding_needed = 1;
+            ist->is_start        = 1;
+            ist->discard         = 0;
+            ist->sample_index    = 0;
+            ist->index           = file_table[file_index].ist_index + pkt.stream_index;
+            ist->pts             = 0;
+            ist->next_pts        = AV_NOPTS_VALUE;
+            input_files_ts_scale[file_index][pkt.stream_index] = 0.0L;
+        }
+
         /* the following test is needed in case new streams appear
            dynamically in stream : we ignore them */
         if (pkt.stream_index >= file_table[file_index].nb_streams)
             goto discard_packet;
+
         ist_index = file_table[file_index].ist_index + pkt.stream_index;
-        ist = ist_table[ist_index];
+        ist = ist_table[ist_index - pkt.index_offset];
         if (ist->discard)
             goto discard_packet;
 
@@ -2278,8 +2327,7 @@ static int av_encode(AVFormatContext **output_files,
         }
 
         //fprintf(stderr,"read #%d.%d size=%d\n", ist->file_index, ist->index, pkt.size);
-        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt) < 0) {
-
+        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt, is) < 0) {
             if (verbose >= 0)
                 fprintf(stderr, "Error while decoding stream #%d.%d\n",
                         ist->file_index, ist->index);
@@ -2300,7 +2348,7 @@ static int av_encode(AVFormatContext **output_files,
     for(i=0;i<nb_istreams;i++) {
         ist = ist_table[i];
         if (ist->decoding_needed) {
-            output_packet(ist, i, ost_table, nb_ostreams, NULL);
+            output_packet(ist, i, ost_table, nb_ostreams, NULL, is);
         }
     }
 
