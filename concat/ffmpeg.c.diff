diff --git a/ffmpeg.c b/ffmpeg.c
index 22bfed8..097f12b 100644
--- a/ffmpeg.c
+++ b/ffmpeg.c
@@ -70,6 +70,8 @@
 
 #undef exit
 
+#include "libavformat/playlist.h"
+
 const char program_name[] = "FFmpeg";
 const int program_birth_year = 2000;
 
@@ -223,6 +225,10 @@ static unsigned int sws_flags = SWS_BICUBIC;
 
 static int64_t timer_start;
 
+static int concatenate_video_files;
+
+PlaylistContext *playlist_ctx;
+
 static uint8_t *audio_buf;
 static uint8_t *audio_out;
 static uint8_t *audio_out2;
@@ -1237,7 +1243,8 @@ static void print_report(AVFormatContext **output_files,
 /* pkt = NULL means EOF (needed to flush decoder buffers) */
 static int output_packet(AVInputStream *ist, int ist_index,
                          AVOutputStream **ost_table, int nb_ostreams,
-                         const AVPacket *pkt)
+                         const AVPacket *pkt,
+                         AVFormatContext *is)
 {
     AVFormatContext *os;
     AVOutputStream *ost;
@@ -1250,6 +1257,8 @@ static int output_packet(AVInputStream *ist, int ist_index,
     AVSubtitle subtitle, *subtitle_to_free;
     int got_subtitle;
     AVPacket avpkt;
+    if (ist && is && pkt && is->nb_streams > pkt->stream_index && is->streams && is->streams[pkt->stream_index] && is->streams[pkt->stream_index]->codec)
+        ist->st = is->streams[pkt->stream_index];
 
     if(ist->next_pts == AV_NOPTS_VALUE)
         ist->next_pts= ist->pts;
@@ -1644,6 +1653,7 @@ static int av_encode(AVFormatContext **output_files,
     uint8_t no_packet[MAX_FILES]={0};
     int no_packet_count=0;
 
+
     file_table= av_mallocz(nb_input_files * sizeof(AVInputFile));
     if (!file_table)
         goto fail;
@@ -2278,8 +2288,7 @@ static int av_encode(AVFormatContext **output_files,
         }
 
         //fprintf(stderr,"read #%d.%d size=%d\n", ist->file_index, ist->index, pkt.size);
-        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt) < 0) {
-
+        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt, is) < 0) {
             if (verbose >= 0)
                 fprintf(stderr, "Error while decoding stream #%d.%d\n",
                         ist->file_index, ist->index);
@@ -2300,7 +2309,7 @@ static int av_encode(AVFormatContext **output_files,
     for(i=0;i<nb_istreams;i++) {
         ist = ist_table[i];
         if (ist->decoding_needed) {
-            output_packet(ist, i, ost_table, nb_ostreams, NULL);
+            output_packet(ist, i, ost_table, nb_ostreams, NULL, is);
         }
     }
 
@@ -2848,6 +2857,7 @@ static enum CodecID find_codec_or_die(const char *name, int type, int encoder)
 
 static void opt_input_file(const char *filename)
 {
+
     AVFormatContext *ic;
     AVFormatParameters params, *ap = &params;
     int err, i, ret, rfps, rfps_base;
@@ -2859,6 +2869,45 @@ static void opt_input_file(const char *filename)
     using_stdin |= !strncmp(filename, "pipe:", 5) ||
                     !strcmp(filename, "/dev/stdin");
 
+
+    if (concatenate_video_files) { // need to specify -conc before -i
+        int filenamelen = strlen(filename);
+        if (!playlist_ctx) {
+            ic = av_malloc(sizeof(*ic));
+//            ic = avformat_alloc_context();
+            printf("need to generate playlist ctx\n");
+            playlist_ctx = ff_playlist_alloc_context();
+            playlist_ctx->pelist_size = 1;
+            playlist_ctx->pelist = av_malloc(playlist_ctx->pelist_size * sizeof(*(playlist_ctx->pelist)));
+            memset(playlist_ctx->pelist, 0, playlist_ctx->pelist_size * sizeof(*(playlist_ctx->pelist)));
+            playlist_ctx->pelist[playlist_ctx->pelist_size-1] = av_malloc(sizeof(*(playlist_ctx->pelist[playlist_ctx->pelist_size-1])));
+            memset(playlist_ctx->pelist[playlist_ctx->pelist_size-1], 0, sizeof(*(playlist_ctx->pelist[playlist_ctx->pelist_size-1])));
+            playlist_ctx->pelist[playlist_ctx->pelist_size-1]->filename =  av_malloc(sizeof(char) * (filenamelen+1));
+            av_strlcpy(playlist_ctx->pelist[playlist_ctx->pelist_size-1]->filename, filename, filenamelen+1);
+            av_strlcpy(ic->filename, filename, sizeof(ic->filename));
+            ic->nb_streams = 2;
+            ic->iformat = ff_concat_alloc_demuxer();
+            ic->priv_data = playlist_ctx;
+            for (i = 0; i < playlist_ctx->pe_curidxs_size; ++i) {
+                ff_playlist_populate_context(ic, i);
+            }
+            nb_input_files = 1;
+            input_files[0] = ic;
+            goto configcodecs;
+        }
+        else {
+            printf("adding new file to playlist\n");
+            ++playlist_ctx->pelist_size;
+            playlist_ctx->pelist = av_realloc(playlist_ctx->pelist, playlist_ctx->pelist_size * sizeof(*(playlist_ctx->pelist)));
+            playlist_ctx->pelist[playlist_ctx->pelist_size-1] = av_malloc(sizeof(*(playlist_ctx->pelist[playlist_ctx->pelist_size-1])));
+            memset(playlist_ctx->pelist[playlist_ctx->pelist_size-1], 0, sizeof(*(playlist_ctx->pelist[playlist_ctx->pelist_size-1])));
+            playlist_ctx->pelist[playlist_ctx->pelist_size-1]->filename =  av_realloc(playlist_ctx->pelist[playlist_ctx->pelist_size-1]->filename, sizeof(char) * (filenamelen+1));
+            av_strlcpy(playlist_ctx->pelist[playlist_ctx->pelist_size-1]->filename, filename, filenamelen+1);
+        }
+        return;
+    }
+
+
     /* get default parameters from command line */
     ic = avformat_alloc_context();
 
@@ -2925,6 +2974,8 @@ static void opt_input_file(const char *filename)
         start_time = 0;
     }
 
+    configcodecs:
+
     /* update the current parameters so that they match the one of the input stream */
     for(i=0;i<ic->nb_streams;i++) {
         AVCodecContext *enc = ic->streams[i]->codec;
@@ -3000,6 +3051,8 @@ static void opt_input_file(const char *filename)
         dump_format(ic, nb_input_files, filename, 0);
 
     nb_input_files++;
+    if (concatenate_video_files)
+        nb_input_files = 1;
     file_iformat = NULL;
     file_oformat = NULL;
 
@@ -3874,6 +3927,7 @@ static const OptionDef options[] = {
     { "programid", HAS_ARG | OPT_INT | OPT_EXPERT, {(void*)&opt_programid}, "desired program number", "" },
     { "xerror", OPT_BOOL, {(void*)&exit_on_error}, "exit on error", "error" },
     { "copyinkf", OPT_BOOL | OPT_EXPERT, {(void*)&copy_initial_nonkeyframes}, "copy initial non-keyframes" },
+    { "conc", OPT_BOOL, {(void*)&concatenate_video_files}, "concatenate video files", "concatenate" },
 
     /* video options */
     { "b", OPT_FUNC2 | HAS_ARG | OPT_VIDEO, {(void*)opt_bitrate}, "set bitrate (in bits/s)", "bitrate" },
