diff --git a/ffmpeg.c b/ffmpeg.c
index 2686e1d..9b6eac3 100644
--- a/ffmpeg.c
+++ b/ffmpeg.c
@@ -40,6 +40,7 @@
 #include "libavutil/fifo.h"
 #include "libavutil/avstring.h"
 #include "libavformat/os_support.h"
+#include "libavformat/avplaylist.h"
 
 #if HAVE_SYS_RESOURCE_H
 #include <sys/types.h>
@@ -1236,7 +1237,8 @@ static void print_report(AVFormatContext **output_files,
 /* pkt = NULL means EOF (needed to flush decoder buffers) */
 static int output_packet(AVInputStream *ist, int ist_index,
                          AVOutputStream **ost_table, int nb_ostreams,
-                         const AVPacket *pkt)
+                         const AVPacket *pkt,
+                         AVFormatContext *ic)
 {
     AVFormatContext *os;
     AVOutputStream *ost;
@@ -1248,8 +1250,20 @@ static int output_packet(AVInputStream *ist, int ist_index,
     static unsigned int samples_size= 0;
     AVSubtitle subtitle, *subtitle_to_free;
     int got_subtitle;
+    int stream_offset = 0;
     AVPacket avpkt;
-
+    AVPlaylistContext *pl_ctx = NULL;
+    if (ic && ic->iformat && ic->iformat->long_name && ic->priv_data &&
+        !strncmp(ic->iformat->long_name, "CONCAT", 6))
+        pl_ctx = ic->priv_data;
+    if (pl_ctx && pkt) {
+        unsigned int stream_total = 0;
+        for (i = 0; pkt->stream_index >= stream_total; ++i) {
+            stream_offset = stream_total;
+            stream_total = pl_ctx->nb_streams_list[i];
+        }
+        ist->st = ic->streams[pkt->stream_index];
+    }
     if(ist->next_pts == AV_NOPTS_VALUE)
         ist->next_pts= ist->pts;
 
@@ -1397,7 +1411,7 @@ static int output_packet(AVInputStream *ist, int ist_index,
                 int frame_size;
 
                 ost = ost_table[i];
-                if (ost->source_index == ist_index) {
+                if (ost->source_index == ist_index - stream_offset) {
                     os = output_files[ost->file_index];
 
                     /* set the input output pts pairs */
@@ -2149,6 +2163,8 @@ static int av_encode(AVFormatContext **output_files,
         AVPacket pkt;
         double ipts_min;
         double opts_min;
+        AVPlaylistContext *pl_ctx = NULL;
+        int stream_offset = 0;
 
     redo:
         ipts_min= 1e100;
@@ -2234,12 +2250,48 @@ static int av_encode(AVFormatContext **output_files,
         if (do_pkt_dump) {
             av_pkt_dump_log(NULL, AV_LOG_DEBUG, &pkt, do_hex_dump);
         }
+
+        stream_offset = 0;
+        if (is && is->iformat && is->iformat->long_name && is->priv_data &&
+        !strncmp(is->iformat->long_name, "CONCAT", 6))
+            pl_ctx = is->priv_data;
+        if (pl_ctx) {
+            unsigned int stream_total = 0;
+            if (pkt.stream_index >= nb_istreams &&
+                pkt.stream_index < is->nb_streams &&
+                pkt.stream_index > 0 &&
+                is->streams[pkt.stream_index]) {
+                ist_table = av_realloc(ist_table, sizeof(*ist_table) * (pkt.stream_index + 1));
+                for (i = nb_istreams; i < pkt.stream_index + 1; ++i)
+                    ist_table[i] = NULL;
+                file_table[file_index].nb_streams = file_table[file_index].ist_index + pkt.stream_index + 1;
+            }
+            if (!ist_table[pkt.stream_index]) {
+                ist = ist_table[pkt.stream_index] = av_mallocz(sizeof(AVInputStream));
+                ist->st              = is->streams[pkt.stream_index];
+                ist->file_index      = file_index;
+                ist->decoding_needed = 1;
+                ist->is_start        = 1;
+                ist->discard         = 0;
+                ist->sample_index    = 0;
+                ist->index           = file_table[file_index].ist_index + pkt.stream_index;
+                ist->pts             = 0;
+                ist->next_pts        = AV_NOPTS_VALUE;
+                input_files_ts_scale[file_index][pkt.stream_index] = 0.0L;
+            }
+            for (i = 0; pkt.stream_index >= stream_total; ++i) {
+                stream_offset = stream_total;
+                stream_total = pl_ctx->nb_streams_list[i];
+            }
+        }
+
         /* the following test is needed in case new streams appear
            dynamically in stream : we ignore them */
         if (pkt.stream_index >= file_table[file_index].nb_streams)
             goto discard_packet;
+
         ist_index = file_table[file_index].ist_index + pkt.stream_index;
-        ist = ist_table[ist_index];
+        ist = ist_table[ist_index - stream_offset];
         if (ist->discard)
             goto discard_packet;
 
@@ -2271,8 +2323,7 @@ static int av_encode(AVFormatContext **output_files,
         }
 
         //fprintf(stderr,"read #%d.%d size=%d\n", ist->file_index, ist->index, pkt.size);
-        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt) < 0) {
-
+        if (output_packet(ist, ist_index, ost_table, nb_ostreams, &pkt, is) < 0) {
             if (verbose >= 0)
                 fprintf(stderr, "Error while decoding stream #%d.%d\n",
                         ist->file_index, ist->index);
@@ -2293,7 +2344,7 @@ static int av_encode(AVFormatContext **output_files,
     for(i=0;i<nb_istreams;i++) {
         ist = ist_table[i];
         if (ist->decoding_needed) {
-            output_packet(ist, i, ost_table, nb_ostreams, NULL);
+            output_packet(ist, i, ost_table, nb_ostreams, NULL, is);
         }
     }
 
