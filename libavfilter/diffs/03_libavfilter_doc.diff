Index: doc/libavfilter.texi
===================================================================
--- doc/libavfilter.texi	(revision 22866)
+++ doc/libavfilter.texi	(working copy)
@@ -139,6 +139,20 @@
 
 The default value of ``width'' and ``height'' is 0.
 
+@section drawbox
+
+@example
+./ffmpeg -i in.avi -vfilters "drawbox=10:20:200:60:red" out.avi
+@end example
+
+Draw a box with x:y:width:height dimensions in a chosen color.
+
+@section fifo
+
+@example
+./ffmpeg -i in.avi -vfilters "fifo" out.avi
+@end example
+
 @section format
 
 Convert the input video to one of the specified pixel formats.
@@ -156,6 +170,30 @@
 
 will convert the input video to the format ``yuv420p''.
 
+@section fps
+
+@example
+./ffmpeg -i in.avi -vfilters "fps=30000:1001" out.avi
+@end example
+
+Modifies the framerate of the input video to a chosen one.
+
+@section hflip
+
+@example
+./ffmpeg -i in.avi -vfilters "hflip" out.avi
+@end example
+
+Flip the video horizontally.
+
+@section negate
+
+@example
+./ffmpeg -i in.avi -vfilters "negate" out.avi
+@end example
+
+Convert a video to its negative.
+  
 @section noformat
 
 Force libavfilter not to use any of the specified pixel formats for the
@@ -177,6 +215,98 @@
 
 Pass the source unchanged to the output.
 
+@section overlay
+
+Overlay one video on top of another (see the example in the introduction
+section).
+Be aware that frames are taken
+from each input video in timestamp order, hence, if their initial
+timestamps differ, it is a a good idea to pass the two
+inputs through a @var{setpts=PTS-STARTPTS} filter to have them
+begin in the same zero timestamp, as it does the example for
+the @var{movie} filter.
+
+Parameters to the filter are separated by a colon. The first parameter
+is the x coordinate of the overlay, the second parameter is the y
+coordinate. The parameters need not be constant expressions, but may
+be expressions containing the names @var{mainW}, @var{mainH},
+@var{overlayW} and @var{overlayH}, for the size of the first and second
+input video, respectively. For example,
+@example
+overlay=mainW-overlayW-10:mainH-overlayH-10
+@end example
+can be used to draw the overlay at 10 pixels from the bottom right
+corner of the main video.
+
+The filter accepts a third optional parameter, if set to a value
+different than 0, it will alpha-blend the overlayed video on top of
+the first one.
+
+This can be used in particular for performing watermarking effects, or
+for adding a logo on top of the input video.
+
+For example, the following command will insert a transparent PNG
+logo in the bottom left corner of the input video:
+@example
+movie=0:png:logo.png [logo]; [in][logo] overlay=10:mainH-overlayH-10:1 [out]
+@end example
+
+Notice the last parameter to overlay ":1" - this enables alpha blending.
+
+The following example will insert 2 different transparent PNG
+logos (second logo on bottom right corner):
+@example
+movie=0:png:logo1.png [logo1];
+movie=0:png:logo2.png [logo2];
+[in][logo1] overlay=10:mainH-overlayH-10:1 [in+logo1];
+[in+logo1][logo2] overlay=mainW-overlayW-10:mainH-overlayH-10:1 [out]
+@end example
+
+You could chain and add more overlays this way but the efficiency of
+such approach is yet to be tested.
+
+@section pad
+
+Add paddings to the input image, and places the original input at the
+given coordinates x, y.
+
+It accepts the following parameters: width:height:x:y:color.
+
+Follows the description of the accepted parameters.
+
+@table @option
+@item width, height
+
+Specify the size of the output image with the paddings added. If the
+value for ``width'' or ``height'' is 0, the corresponding input size
+is used for the output.
+
+The default value of ``width'' and ``height'' is 0.
+
+@item x, y
+
+Specify the offsets where to place the input image in the padded area
+with respect to the top/left border of the output image.
+
+The default value of ``x'' and ``y'' is 0.
+
+@item color
+
+Specify the color of the padded area, it can be the name of a color
+(case insensitive match) or a 0xRRGGBB[AA] sequence.
+
+The default value of ``color'' is ``black''.
+
+@end table
+
+@section rotate
+
+@example
+./ffmpeg -i in.avi -vfilters "rotate=30" out.avi
+@end example
+
+Rotate video by a chosen amount in degrees. By default, 45 degrees.
+
 @section scale
 
 Scale the input video to width:height and/or convert the image format.
@@ -202,6 +332,24 @@
 
 The default value of ``width'' and ``height'' is 0.
 
+@section setpts
+
+@example
+# Start counting PTS from zero
+ffmpeg -i input.avi -vfilters setpts=PTS-STARTPTS output.avi
+
+# Fast motion
+ffmpeg -i input.avi -vfilters setpts=0.5*PTS output.avi
+
+# Fixed rate 25 fps
+ffmpeg -i input.avi -vfilters setpts=N*AVTB/25 output.avi
+
+# Fixed rate 25 fps with some jitter
+ffmpeg -i input.avi -vfilters 'setpts=AVTB/25*(N+0.05*sin(N*2*PI/25))' output.avi
+@end example
+
+Modifies the presentation timestamp (PTS) of the input video.
+
 @section slicify
 
 Pass the images of input video on to next video filter as multiple
@@ -217,6 +365,19 @@
 Adding this in the beginning of filter chains should make filtering
 faster due to better use of the memory cache.
 
+@section split
+
+See the example in the introduction section.
+The input video is passed on to two outputs.
+
+@section transpose
+
+@example
+./ffmpeg -i in.avi -vfilters "transpose" out.avi
+@end example
+
+Transpose (line => column) input video to next video filter.
+
 @section unsharp
 
 Sharpen or blur the input video. It accepts the following parameters:
@@ -282,6 +443,32 @@
 
 Below is a description of the currently available video sources.
 
+@section buffer
+
+This input filter is used by the client application to feed pictures to
+the filter chain. See ffmpeg.c for an usage example.
+
+@section movie
+
+The parameters of the movie filter are
+@example
+ seekpoint in microseconds : string format : string filename
+@end example
+
+We can overlay a second movie on top of a main one as in this graph:
+
+@example
+ input -----------> deltapts0 --> overlay --> output
+                                    ^
+ movie --> scale--> deltapts1 ------|
+@end example
+
+To do that
+
+@example
+ffmpeg -i in.avi -s 240x320 -vfilters "[in]setpts=PTS-STARTPTS, [T1]overlay=16:16[out]; movie=3200000:avi:in.avi, scale=180:144, setpts=PTS-STARTPTS[T1]" -y out.avi
+@end example
+
 @section nullsrc
 
 Null video source, never return images. It is mainly useful as a
