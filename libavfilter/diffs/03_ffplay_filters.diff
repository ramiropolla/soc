--- ffplay.c	2007-08-20 11:53:06.000000000 -0400
+++ ffplay.c	2007-08-20 11:57:49.000000000 -0400
@@ -25,6 +25,10 @@
 #include "swscale.h"
 #include "avstring.h"
 
+#if ENABLE_AVFILTER
+# include "avfilter.h"
+#endif
+
 #include "version.h"
 #include "cmdutils.h"
 
@@ -81,6 +85,10 @@
     int width, height; /* source height & width */
     enum PixelFormat pix_fmt;
     int allocated;
+
+#if ENABLE_AVFILTER
+    AVFilterPicRef *picref;
+#endif
 } VideoPicture;
 
 typedef struct SubPicture {
@@ -163,6 +171,10 @@
     //    QETimer *video_timer;
     char filename[1024];
     int width, height, xleft, ytop;
+
+#if ENABLE_AVFILTER
+    AVFilterContext *out_video_filter;          ///<the last filter in the video chain
+#endif
 } VideoState;
 
 void show_help(void);
@@ -202,6 +214,9 @@
 static int error_resilience = FF_ER_CAREFUL;
 static int error_concealment = 3;
 static int decoder_reorder_pts= 0;
+#if ENABLE_AVFILTER
+static char *vfilters = NULL;
+#endif
 
 /* current context */
 static int is_full_screen;
@@ -648,14 +663,22 @@
 
     vp = &is->pictq[is->pictq_rindex];
     if (vp->bmp) {
+#if ENABLE_AVFILTER
+        if (vp->picref->pixel_aspect.num == 0)
+            aspect_ratio = 0;
+        else
+            aspect_ratio = av_q2d(vp->picref->pixel_aspect);
+#else
         /* XXX: use variable in the frame */
         if (is->video_st->codec->sample_aspect_ratio.num == 0)
             aspect_ratio = 0;
         else
-            aspect_ratio = av_q2d(is->video_st->codec->sample_aspect_ratio)
-                * vp->width / vp->height;
+            aspect_ratio = av_q2d(is->video_st->codec->sample_aspect_ratio);
+#endif
         if (aspect_ratio <= 0.0)
             aspect_ratio = (float)vp->width / (float)vp->height;
+        else
+            aspect_ratio *= (float)vp->width / (float)vp->height;
         /* if an active format is indicated, then it overrides the
            mpeg format */
 #if 0
@@ -858,9 +881,15 @@
     } else if(!is_full_screen && screen_width){
         w = screen_width;
         h = screen_height;
+#if ENABLE_AVFILTER
+    }else if (is->out_video_filter && is->out_video_filter->inputs[0]){
+        w = is->out_video_filter->inputs[0]->w;
+        h = is->out_video_filter->inputs[0]->h;
+#else
     }else if (is->video_st && is->video_st->codec->width){
         w = is->video_st->codec->width;
         h = is->video_st->codec->height;
+#endif
     } else {
         w = 640;
         h = 480;
@@ -1166,9 +1195,19 @@
     if (vp->bmp)
         SDL_FreeYUVOverlay(vp->bmp);
 
+#if ENABLE_AVFILTER
+    if (vp->picref)
+        avfilter_unref_pic(vp->picref);
+    vp->picref = NULL;
+
+    vp->width   = is->out_video_filter->inputs[0]->w;
+    vp->height  = is->out_video_filter->inputs[0]->h;
+    vp->pix_fmt = is->out_video_filter->inputs[0]->format;
+#else
     vp->width   = is->video_st->codec->width;
     vp->height  = is->video_st->codec->height;
     vp->pix_fmt = is->video_st->codec->pix_fmt;
+#endif
 
 #if 0
     /* XXX: use generic function */
@@ -1223,8 +1262,13 @@
 
     /* alloc or resize hardware picture buffer */
     if (!vp->bmp ||
+#if ENABLE_AVFILTER
+        vp->width  != is->out_video_filter->inputs[0]->w ||
+        vp->height != is->out_video_filter->inputs[0]->h) {
+#else
         vp->width != is->video_st->codec->width ||
         vp->height != is->video_st->codec->height) {
+#endif
         SDL_Event event;
 
         vp->allocated = 0;
@@ -1248,6 +1292,12 @@
 
     /* if the frame is not skipped, then display it */
     if (vp->bmp) {
+#if ENABLE_AVFILTER
+        if(vp->picref)
+            avfilter_unref_pic(vp->picref);
+        vp->picref = src_frame->opaque;
+#endif
+
         /* get a pointer on the bitmap */
         SDL_LockYUVOverlay (vp->bmp);
 
@@ -1374,6 +1424,136 @@
     return 0;
 }
 
+#if ENABLE_AVFILTER
+typedef struct {
+    VideoState *is;
+    AVFrame *frame;
+} FilterPriv;
+
+static int input_init(AVFilterContext *ctx, const char *args, void *opaque)
+{
+    FilterPriv *priv = ctx->priv;
+    if(!opaque) return -1;
+
+    priv->is = opaque;
+    priv->frame = avcodec_alloc_frame();
+
+    return 0;
+}
+
+static void input_uninit(AVFilterContext *ctx)
+{
+    FilterPriv *priv = ctx->priv;
+    av_free(priv->frame);
+}
+
+static int input_request_frame(AVFilterLink *link)
+{
+    FilterPriv *priv = link->src->priv;
+    AVFilterPicRef *picref;
+    uint64_t pts;
+
+    if(!get_video_frame(priv->is, priv->frame, &pts))
+        return -1;
+
+    /* FIXME: until I figure out how to hook everything up to the codec
+     * right, we're just copying the entire frame. */
+    picref = avfilter_get_video_buffer(link, AV_PERM_WRITE);
+    av_picture_copy((AVPicture *)&picref->data, (AVPicture *)priv->frame,
+                    picref->pic->format, picref->w, picref->h);
+
+    picref->pts = pts;
+    picref->pixel_aspect = priv->is->video_st->codec->sample_aspect_ratio;
+    avfilter_start_frame(link, avfilter_ref_pic(picref, ~0));
+    avfilter_draw_slice(link, 0, picref->h);
+    avfilter_end_frame(link);
+    avfilter_unref_pic(picref);
+
+    return 0;
+}
+
+static int *input_query_formats(AVFilterLink *link)
+{
+    FilterPriv *priv = link->src->priv;
+    return avfilter_make_format_list(1, priv->is->video_st->codec->pix_fmt);
+}
+
+static int input_config_props(AVFilterLink *link)
+{
+    FilterPriv *priv  = link->src->priv;
+    AVCodecContext *c = priv->is->video_st->codec;
+
+    link->w = c->width;
+    link->h = c->height;
+
+    return 0;
+}
+
+static AVFilter input_filter =
+{
+    .name      = "ffplay_input",
+    .author    = "Bobby Bingham",
+
+    .priv_size = sizeof(FilterPriv),
+
+    .init      = input_init,
+    .uninit    = input_uninit,
+
+    .inputs    = (AVFilterPad[]) {{ .name = NULL }},
+    .outputs   = (AVFilterPad[]) {{ .name = "default",
+                                    .type = AV_PAD_VIDEO,
+                                    .request_frame = input_request_frame,
+                                    .query_formats = input_query_formats,
+                                    .config_props  = input_config_props, },
+                                  { .name = NULL }},
+};
+
+static void output_end_frame(AVFilterLink *link)
+{
+}
+
+static int *output_query_formats(AVFilterLink *link)
+{
+    return avfilter_make_format_list(8, PIX_FMT_YUV420P, PIX_FMT_YUV422P, PIX_FMT_YUV444P,
+                                        PIX_FMT_YUV410P, PIX_FMT_YUV411P, PIX_FMT_YUYV422,
+                                        PIX_FMT_RGB24,   PIX_FMT_BGR24);
+}
+
+static int get_filtered_video_frame(AVFilterContext *ctx, AVFrame *frame,
+                                    uint64_t *pts)
+{
+    AVFilterPicRef *pic;
+
+    if(avfilter_request_frame(ctx->inputs[0]))
+        return 0;
+    if(!(pic = ctx->inputs[0]->cur_pic))
+        return 0;
+    ctx->inputs[0]->cur_pic = NULL;
+
+    frame->opaque = pic;
+    *pts          = pic->pts;
+
+    memcpy(frame->data,     pic->data,     sizeof(frame->data));
+    memcpy(frame->linesize, pic->linesize, sizeof(frame->linesize));
+
+    return 1;
+}
+
+static AVFilter output_filter =
+{
+    .name      = "ffplay_output",
+    .author    = "Bobby Bingham",
+
+    .inputs    = (AVFilterPad[]) {{ .name          = "default",
+                                    .type          = AV_PAD_VIDEO,
+                                    .end_frame     = output_end_frame,
+                                    .query_formats = output_query_formats,
+                                    .min_perms     = AV_PERM_READ, },
+                                  { .name = NULL }},
+    .outputs   = (AVFilterPad[]) {{ .name = NULL }},
+};
+#endif  /* ENABLE_AVFILTER */
+
 static int video_thread(void *arg)
 {
     VideoState *is = arg;
@@ -1381,10 +1561,46 @@
     uint64_t pts_int;
     double pts;
 
+#if ENABLE_AVFILTER
+    AVFilterContext *filt_src = NULL, *filt_out = NULL, *filt_graph = NULL;
+    AVFilter *filterdef;
+
+    avfilter_init();
+    //avfilter_register(&input_filter);
+    //avfilter_register(&output_filter);
+
+    if(!(filt_src = avfilter_open(&input_filter,  "src")))   goto the_end;
+    if(!(filt_out = avfilter_open(&output_filter, "out")))   goto the_end;
+
+    if(avfilter_init_filter(filt_src, NULL, is))             goto the_end;
+    if(avfilter_init_filter(filt_out, NULL, frame))          goto the_end;
+
+    if(vfilters) {
+        if(!(filterdef = avfilter_get_by_name("graph")) ||
+           !(filt_graph = avfilter_open(filterdef, NULL)))
+            goto the_end;
+        if(avfilter_init_filter(filt_graph, vfilters, NULL))
+            goto the_end;
+        if(avfilter_link(filt_src, 0, filt_graph, 0))        goto the_end;
+        if(avfilter_link(filt_graph, 0, filt_out, 0))        goto the_end;
+        if(avfilter_config_link(filt_src->outputs[0]))       goto the_end;
+        if(avfilter_graph_config_links(filt_graph))          goto the_end;
+        if(avfilter_config_link(filt_out->inputs[0]))        goto the_end;
+    } else {
+    if(avfilter_link(filt_src, 0, filt_out, 0) < 0)          goto the_end;
+    if(avfilter_config_link(filt_src->outputs[0]))           goto the_end;
+    }
+    is->out_video_filter = filt_out;
+#endif
+
     for(;;) {
         while (is->paused && !is->videoq.abort_request)
             SDL_Delay(10);
+#if ENABLE_AVFILTER
+        while(get_filtered_video_frame(filt_out, frame, &pts_int)) {
+#else
         while(get_video_frame(is, frame, &pts_int)) {
+#endif
             pts  = pts_int;
             pts /= AV_TIME_BASE;
             if(output_picture2(is, frame, pts) < 0)
@@ -1395,6 +1611,10 @@
                 stream_pause(cur_stream);
     }
  the_end:
+ #if ENABLE_AVFILTER
+    if(filt_src) avfilter_destroy(filt_src);
+    if(filt_out) avfilter_destroy(filt_out);
+ #endif
     av_free(frame);
     return 0;
 }
@@ -2145,6 +2365,12 @@
     /* free all pictures */
     for(i=0;i<VIDEO_PICTURE_QUEUE_SIZE; i++) {
         vp = &is->pictq[i];
+#if ENABLE_AVFILTER
+        if (vp->picref) {
+            avfilter_unref_pic(vp->picref);
+            vp->picref = NULL;
+        }
+#endif
         if (vp->bmp) {
             SDL_FreeYUVOverlay(vp->bmp);
             vp->bmp = NULL;
@@ -2497,6 +2723,9 @@
 #endif
     { "sync", HAS_ARG | OPT_EXPERT, {(void*)opt_sync}, "set audio-video sync. type (type=audio/video/ext)", "type" },
     { "threads", HAS_ARG | OPT_EXPERT, {(void*)opt_thread_count}, "thread count", "count" },
+#if ENABLE_AVFILTER
+    { "vfilters", OPT_STRING | HAS_ARG, {(void*)&vfilters}, "video filters", "filter list" },
+#endif
     { NULL, },
 };
 
